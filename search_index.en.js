window.searchIndex = {"fields":["title","body"],"pipeline":["trimmer","stopWordFilter","stemmer"],"ref":"id","version":"0.9.5","index":{"body":{"root":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/code-test/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":6.708203932499369},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":6.164414002968976},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.449489742783178}},"df":6,"0":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.449489742783178}},"df":1,"3":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":1,"0":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"1":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}},"1":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":1,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"7":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}},"3":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772}},"df":1},"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}},"5":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1},"1":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"x":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"2":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"f":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}},"1":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/code-test/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.7416573867739413},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.898979485566356},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":7,".":{"docs":{},"df":0,"7":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"+":{"docs":{},"df":0,"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"8":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}},"0":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.605551275463989}},"df":3,",":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}},".":{"docs":{},"df":0,"3":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}},"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.242640687119285}},"df":1,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}},"h":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772}},"df":1}}},"1":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2,"7":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1},"8":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1}},"4":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"9":{"docs":{},"df":0,"5":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":3.0}},"df":1,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}}}}},"6":{"docs":{},"df":0,"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"7":{"docs":{},"df":0,"9":{"docs":{},"df":0,"8":{"docs":{},"df":0,"7":{"docs":{},"df":0,"5":{"docs":{},"df":0,"4":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{},"df":0,"2":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"7":{"docs":{},"df":0,"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"7":{"docs":{},"df":0,"9":{"docs":{},"df":0,"8":{"docs":{},"df":0,"7":{"docs":{},"df":0,"5":{"docs":{},"df":0,"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"6":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3,"f":{"docs":{},"df":0,"8":{"docs":{},"df":0,"7":{"docs":{},"df":0,"7":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}},"7":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"8":{"docs":{},"df":0,".":{"docs":{},"df":0,"5":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"f":{"docs":{},"df":0,"4":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}}},"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.0}},"df":1,"h":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}},"2":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/code-test/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":6,".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}},"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2,"0":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"1":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"3":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1},"4":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"7":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":3.3166247903554}},"df":2},"8":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"9":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":1}},"2":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772}},"df":1},"1":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1},"3":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}},"1":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"4":{"docs":{},"df":0,"7":{"docs":{},"df":0,"4":{"docs":{},"df":0,"8":{"docs":{},"df":0,"3":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{},"df":0,"7":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"8":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}},"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"4":{"docs":{},"df":0,"7":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"3":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"5":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1,"5":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2},"6":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979}},"df":2},"n":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"3":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":6,".":{"docs":{},"df":0,"4":{"docs":{},"df":0,"5":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1,"+":{"docs":{},"df":0,"3":{"docs":{},"df":0,"8":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"4":{"docs":{},"df":0,"9":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}}}},"0":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1,"8":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"2":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":2,"7":{"docs":{},"df":0,"6":{"docs":{},"df":0,"7":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"8":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"3":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":1},"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"6":{"docs":{},"df":0,"7":{"docs":{},"df":0,"1":{"docs":{},"df":0,"5":{"docs":{},"df":0,"3":{"docs":{},"df":0,"9":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"8":{"docs":{},"df":0,"2":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}},"8":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"4":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":5,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}}},"4":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"5":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":1},"9":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"4":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}},"5":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.3166247903554}},"df":4,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}},"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":1},"1":{"docs":{},"df":0,"9":{"docs":{},"df":0,"8":{"docs":{},"df":0,"3":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"6":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.8284271247461903},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":4,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}}}}},"4":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1,"k":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}},"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"3":{"docs":{},"df":0,"5":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}},"7":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2,"a":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":1}},"8":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":4,"0":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"5":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}},"9":{"docs":{},"df":0,"c":{"docs":{},"df":0,"5":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"5":{"docs":{},"df":0,"1":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"2":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}}}}},"9":{"docs":{},"df":0,"4":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":1}},"9":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"_":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}},"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"p":{"docs":{},"df":0,"m":{"docs":{},"df":0,"0":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"p":{"docs":{},"df":0,"m":{"docs":{},"df":0,"0":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}},"a":{"docs":{},"df":0,"5":{"docs":{},"df":0,"3":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"7":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":5}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":4,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":3}}}}},"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":2,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907}},"df":3}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3},"w":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.605551275463989},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":6}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4}}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"+":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":2}}}},"p":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2,";":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1},"b":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"z":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1}}}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4}}},"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":5}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":3}}}}}}}}},"g":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":1,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.0}},"df":1}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.0}},"df":1}}}}},"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1,"[":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"]":{"docs":{},"df":0,"[":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1,"]":{"docs":{},"df":0,"[":{"docs":{},"df":0,"j":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":1}}}},"j":{"docs":{},"df":0,"]":{"docs":{},"df":0,"[":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.449489742783178}},"df":1}},"y":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":4}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2}}},"k":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"m":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"x":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979}},"df":1}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.69041575982343},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.6457513110645907}},"df":2}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}},"3":{"docs":{},"df":0,"2":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"1":{"docs":{},"df":0,"3":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":3.872983346207417}},"df":1,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}}}},"[":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.8284271247461903}},"df":2}}}}}},"o":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907}},"df":1,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":1}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}},"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}},"b":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.0}},"df":3,".":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.7320508075688772}},"df":6},"h":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}},"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":2,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}},"w":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.8284271247461903},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.8284271247461903},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":6}}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}},"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.7416573867739413},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":3.0}},"df":4,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3}},"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.3166247903554}},"df":1}},"o":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":5.385164807134504}},"df":2,"1":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":4.0}},"df":1,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":1}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.8284271247461903}},"df":1}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":1}}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.6457513110645907}},"df":1}}}}},":":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.0}},"df":1}}}},"2":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.449489742783178}},"df":1,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":7},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}}}},"x":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.47213595499958}},"df":3,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"u":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4},"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":3.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.605551275463989},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":3,"s":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1}}}}}}},"c":{"docs":{"https://hexavik.github.io/about/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":3.1622776601683795},"https://hexavik.github.io/skills/":{"tf":1.7320508075688772}},"df":5,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2},"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.8284271247461903},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":3}}},"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.7416573867739413},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":5}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"c":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":2.449489742783178}},"df":2,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.23606797749979}},"df":1,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":4,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}},"e":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"h":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2},"g":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":2}},"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":4.69041575982343}},"df":3,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":1,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":3.1622776601683795}},"df":1}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0}},"df":1,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1}}}}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1},"y":{"docs":{},"df":0,"[":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.0}},"df":1,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"_":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"8":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":5.5677643628300215},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/skills/":{"tf":1.7320508075688772}},"df":5,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4}},"g":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":2}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":4}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":3}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.449489742783178}},"df":1}}}},"x":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":4}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":4}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1},"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.872983346207417},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":2.0}},"df":6}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":2}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":5.0}},"df":2}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":1}}}}},"j":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":3}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":2}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.1622776601683795}},"df":3,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.0}},"df":1}}},"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3}}}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.8284271247461903}},"df":2,"p":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.872983346207417}},"df":1}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":2}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2}},"n":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.123105625617661}},"df":2,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.69041575982343},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}}},"p":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.1622776601683795}},"df":1}}}}}},"p":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":2.449489742783178}},"df":2,"'":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":5}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":2}}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"z":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}},"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907}},"df":1,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.7416573867739413},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":3}},"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":4.898979485566356},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":5.385164807134504},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":3.7416573867739413},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":7,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}},"0":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":5.656854249492381},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":2}}}}},"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.0}},"df":1}},"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1},"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979}},"df":1}}},"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772}},"df":1}},"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1},"m":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2},"s":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":6.164414002968976},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.8284271247461903}},"df":3}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":1}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.795831523312719},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":5,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":3}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.8284271247461903}},"df":1,"(":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.449489742783178}},"df":1}},"i":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":5}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":3.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":3}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.0}},"df":3}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/about/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":4}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.7320508075688772},"https://hexavik.github.io/skills/":{"tf":1.4142135623730951}},"df":4,"e":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":2.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"x":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":3.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":4,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"j":{"docs":{},"df":0,"k":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":5,"(":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":2}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}},"t":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.0}},"df":2,"e":{"docs":{},"df":0,")":{"docs":{},"df":0,"(":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"w":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"w":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1},"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1},"m":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":2}}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":3}}}}},"e":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":3,".":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}},"2":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772}},"df":1,"h":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":5}},"g":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":3}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772}},"df":1}}}}},"d":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":4}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.242640687119285},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.242640687119285},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":2.8284271247461903},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":5}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1},"3":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}}},"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":3,"1":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"f":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":3}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":3}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":2,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.4641016151377544}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.1622776601683795}},"df":1}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":4}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":5}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}}}}}}}},"t":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":2}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.8284271247461903}},"df":4}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":4},"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}},"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":5}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.69041575982343},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":5}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}},"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907}},"df":2}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.605551275463989}},"df":4}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178}},"df":3},"s":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772}},"df":1}},"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.242640687119285}},"df":1}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1,"\\":{"docs":{},"df":0,"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":1}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"n":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.4142135623730951}},"df":1,"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979}},"df":1}}}}},"s":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178}},"df":1}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.7320508075688772}},"df":3,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.8284271247461903},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":4,"e":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1},"3":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}}}},"b":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2},"e":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}},"w":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}},"f":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":3,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"'":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":4,"0":{"docs":{},"df":0,"4":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"_":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}},"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":3},"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":5.196152422706632}},"df":2}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"x":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2}},"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1},"w":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":3.3166247903554}},"df":2}},"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}},"w":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2}}},"n":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":7}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"m":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"m":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":3}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"r":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.8284271247461903}},"df":1,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1}}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":6.082762530298219},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.47213595499958},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":4,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4}}},"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}},"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"d":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{},"df":0,"x":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}}},"n":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}},"o":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3},"g":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907}},"df":1,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"p":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":2.8284271247461903},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":3}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}},"w":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/code-test/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":5,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":2,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907}},"df":1,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":3}}}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.449489742783178}},"df":1}}},"c":{"docs":{},"df":0,"0":{"docs":{},"df":0,"5":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1},"p":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}},"p":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":3}},"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.0}},"df":3,"'":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1}}}}}}},"x":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.6457513110645907}},"df":1}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.8284271247461903}},"df":1}}}}}},"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"'":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772}},"df":1}},".":{"docs":{},"df":0,"m":{"docs":{},"df":0,"x":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1,"6":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}},"7":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}},"8":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}}},"/":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":3}},"2":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}},"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":4}}}}}},"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":3}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.4142135623730951}},"df":1},"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":5.196152422706632},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4},"s":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.7416573867739413},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":3}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}},"x":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/about/":{"tf":2.6457513110645907}},"df":1},"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":4},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1}}}},"o":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1,"m":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.0}},"df":4}}},"k":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979}},"df":1}},"o":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.1622776601683795},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.23606797749979}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":3},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":2}}}}}},"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":8.426149773176359},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":8.774964387392123},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":4.358898943540674}},"df":3,"e":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":5}},"l":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":3}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}},"n":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}}}}}}},"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":4}}},"t":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2},"e":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}}}}}},"j":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":2,"a":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2},"v":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}},"n":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4}},"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}},"y":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":3,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":5.0990195135927845},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":4}}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":3,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":3}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}},"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.7320508075688772},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":5}}}}},"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.7320508075688772}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907}},"df":1}},"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}}},"c":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,"x":{"docs":{},"df":0,"2":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}},"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"x":{"docs":{},"df":0,"4":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":3},"f":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1},"p":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"v":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}},"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"f":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.0}},"df":2}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2}}}}},"f":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"o":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.4142135623730951}},"df":7}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":3.3166247903554}},"df":2,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"k":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.8284271247461903},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2},"u":{"docs":{},"df":0,"x":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.4142135623730951}},"df":3}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2},"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":2.0}},"df":3}}},"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.358898943540674}},"df":1,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}},"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"o":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.7320508075688772}},"df":3}},"o":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2},"p":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":7.0710678118654755}},"df":2,"'":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"w":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"p":{"docs":{},"df":0,"c":{"docs":{},"df":0,"2":{"docs":{},"df":0,"1":{"docs":{},"df":0,"4":{"docs":{},"df":0,"8":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":3,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"r":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}},"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.605551275463989},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"d":{"docs":{"https://hexavik.github.io/about/":{"tf":2.23606797749979}},"df":1}}},"m":{"docs":{},"df":0,"3":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}},"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.242640687119285},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":3,"(":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":4}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951},"https://hexavik.github.io/skills/":{"tf":1.4142135623730951}},"df":4}},"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":2}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2},"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1,"k":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}},"x":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}}},"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":1}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1},"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":4.123105625617661}},"df":2,"1":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2},"2":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2},"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.872983346207417},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.605551275463989},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":2.23606797749979}},"df":8}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":3}}}}},"r":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.58257569495584}},"df":1}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":3}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"z":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":1}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"s":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}}},"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1},"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2,"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.872983346207417}},"df":1,".":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"f":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178}},"df":1}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":5},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.7320508075688772}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"p":{"docs":{},"df":0,"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1,"p":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":2}}}}}}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":2.23606797749979}},"df":1}}}}},"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1,".":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}},"n":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":3,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":3.872983346207417}},"df":4,"1":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1},"[":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}},"n":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":4}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"w":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178}},"df":2},"x":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":5.5677643628300215}},"df":1}},"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":4},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":1}},"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":2,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}},"h":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}},"w":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}},"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/code-test/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.0}},"df":6,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1,"3":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"b":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772}},"df":1}}}}},"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}},"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":5,"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":2},"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":5}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.795831523312719}},"df":2},"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1}}}}},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":5}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178}},"df":2,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.69041575982343},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":3}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":2}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":3,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979}},"df":1}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":2}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1,"'":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1},"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":4,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":5.196152422706632},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":7}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907}},"df":1}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":2}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1,"'":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2},"l":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.7320508075688772}},"df":2}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1}},"y":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.449489742783178}},"df":4}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}},"t":{"docs":{"https://hexavik.github.io/posts/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":5.830951894845301},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":3}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3}}}},"g":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":3.7416573867739413}},"df":2,"(":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2}}}},"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"f":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"%":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1},"f":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1},"f":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"u":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"*":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}}},"\\":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}}},"a":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.6457513110645907}},"df":1}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"z":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}},"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"x":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":3}}}},"c":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":3,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}},"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.6457513110645907}},"df":2,"'":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":2.23606797749979}},"df":1}},"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.242640687119285},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":5.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":2.0}},"df":7,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":2.0}},"df":4}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":3}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":5}}},"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.449489742783178}},"df":2,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":2.23606797749979}},"df":1}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}}}}},"u":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}}}}}},"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2,"\"":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1,"o":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.1622776601683795}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1}}}}},"g":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}}}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":4}},"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.605551275463989},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":2,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}},"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":3,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.449489742783178}},"df":3,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}}},"v":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"o":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":6.782329983125268}},"df":2,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":3,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":3.872983346207417}},"df":3}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.449489742783178}},"df":2}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":4}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/about/":{"tf":2.6457513110645907}},"df":1}}}},"r":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":3}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.7416573867739413},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2,"1":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.4641016151377544}},"df":1,"e":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":4.795831523312719},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":5.656854249492381},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.6457513110645907}},"df":5}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}}},"f":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"w":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":1,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":3.4641016151377544},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":3,"'":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":2,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":1}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":1}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}},"f":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.7320508075688772}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":4},"p":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":1}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":1}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"%":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":2}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":3}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}},"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}},"f":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.8284271247461903},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}},"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1}}}}}},"r":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"o":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":3}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907}},"df":2,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}},"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.605551275463989}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":1,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951}},"df":2,"f":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}}},"x":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1},"z":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.8284271247461903},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":4,"o":{"docs":{},"df":0,"f":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/about/":{"tf":2.8284271247461903}},"df":1,"u":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":2.8284271247461903},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":3}},"p":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178}},"df":1}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1}}}},"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":2.8284271247461903},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0}},"df":2}}}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}},"v":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.7320508075688772},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":5}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.7320508075688772}},"df":1}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.0}},"df":2}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.605551275463989},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":2,"i":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"q":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"l":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":6,"1":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":7.211102550927978},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":2}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":4}}}},"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":2.8284271247461903}},"df":3}},"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.7320508075688772}},"df":5},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}},"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}},"v":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/about/":{"tf":3.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":1}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":5.385164807134504}},"df":3,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":4.358898943540674},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":6.082762530298219},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":5}}}}}},"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1}}},"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1,"o":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1},"u":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"h":{"docs":{"https://hexavik.github.io/about/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":5}},"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":5.385164807134504},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":3,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"x":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":1}}}},"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.7320508075688772}},"df":1}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":4}}}}},"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"x":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/code-test/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/about/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":6.082762530298219},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":2.449489742783178},"https://hexavik.github.io/skills/":{"tf":1.4142135623730951}},"df":7,"'":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.8284271247461903}},"df":1}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.7320508075688772}},"df":1}},"k":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1},"q":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":2}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772}},"df":3}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}},"m":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":5,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.7416573867739413}},"df":3,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772},"https://hexavik.github.io/skills/":{"tf":1.4142135623730951}},"df":2}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1},"k":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}},"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":5,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}},"u":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}}}}},"w":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.872983346207417},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":6,"1":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.449489742783178}},"df":1,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"v":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"v":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"0":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"0":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}}}}},"_":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":3.872983346207417}},"df":1,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}}}},"[":{"docs":{},"df":0,"1":{"docs":{},"df":0,"5":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.8284271247461903}},"df":2}}}}}}},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}},"g":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/skills/":{"tf":1.7320508075688772}},"df":3}},"p":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.0}},"df":1},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1},"k":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":3}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.1622776601683795}},"df":2}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":3}}}}},"e":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.4641016151377544}},"df":1},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}},"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.1622776601683795}},"df":1}}},"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":1}}}}},"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}}},"w":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.8284271247461903},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":5,"'":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.449489742783178}},"df":1}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":4.795831523312719},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.6457513110645907},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":2.0}},"df":6,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.23606797749979}},"df":2}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}}}}}}},"u":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.4142135623730951}},"df":1}},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1}}},"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":5}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.3166247903554}},"df":1}},"q":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":2}},"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}},"k":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"k":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.872983346207417}},"df":2}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":4,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{"https://hexavik.github.io/about/":{"tf":3.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":4.123105625617661},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":7.54983443527075},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":6.082762530298219},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":3.0}},"df":8,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":2}},"b":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.0}},"df":2}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":2.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":2}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":3.605551275463989},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":8.18535277187245},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":2.449489742783178}},"df":5,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"1":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1},"2":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":1},"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":7.681145747868608},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":4.358898943540674}},"df":4,"e":{"docs":{},"df":0,"'":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.4142135623730951}},"df":2}}},"o":{"docs":{},"df":0,"u":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":4}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}},"k":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"2":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.1622776601683795},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.4641016151377544},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":3.0}},"df":2}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2}},"k":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"y":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":5}},"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"w":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"'":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"k":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0}},"df":1,"!":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":3}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951}},"df":2}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"g":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.0},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":6}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.449489742783178},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":3}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.4142135623730951}},"df":3},"k":{"docs":{"https://hexavik.github.io/about/":{"tf":2.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":4},"l":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772}},"df":2}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979}},"df":2}}}}}}},"x":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.3166247903554},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":6.557438524302}},"df":2,"m":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}},"y":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":3.3166247903554}},"df":1,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}},"e":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.7320508075688772},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":3.872983346207417}},"df":3,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}}}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/about/":{"tf":1.4142135623730951},"https://hexavik.github.io/skills/":{"tf":1.0}},"df":2}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/about/":{"tf":1.0}},"df":1}}}}},"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.4142135623730951},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":2.23606797749979},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":4,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"title":{"root":{"docs":{},"df":0,"8":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1},"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/posts/intel-hex-format/":{"tf":1.0}},"df":1}}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/keywords-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":3,"m":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hexavik.github.io/skills/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"r":{"docs":{"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"tf":1.0},"https://hexavik.github.io/posts/structures-in-c-programming/":{"tf":1.0}},"df":2}}}}}}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":2}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hexavik.github.io/posts/code-test/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hexavik.github.io/posts/register-vs-memory/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"tf":1.0}},"df":1}}}}}}}},"documentStore":{"save":true,"docs":{"https://hexavik.github.io/":{"body":"","id":"https://hexavik.github.io/","title":""},"https://hexavik.github.io/about/":{"body":"Hi, I am Vikrant A. P., also known as hexavik.\nI'm an experienced Engineer with a passion for Embedded Systems, Robotics, Automation, and Computer Programming. My skills include Programming Languages (C, C++, Rust), Scripting Languages (Markdown, XML), Linux Kernel Architecture, CAD, Embedded Hardware, PCB Designing, Embedded Software, Firmware Development, Linux Device Drivers, and Yocto Project.\nI'm currently working as an SoC hardware and firmware developer, OS maintainer, and algorithm developer in a growing start-up. I'm also a self-taught quick sketch artist and enjoy designing digital graphics and logos.\nFollowing are my domain of expertise and detailed experience that I have worked with till now. (Triangle will expand the detailed information)\n\n    \n1. Full-stack embedded systems engineer\n    \n\nExtensive experience spanning over a decade\nStrong proficiency in hardware design, firmware development, software development, and integration\nProficient in using Autodesk EAGLE and Altium Designer for Circuit Schematics and PCB layout designing (up to 12 layers)\nExperience working with 8051, AVR, and PIC microcontrollers family along with ARM processors (Cortex-A7, Cortex-M3, Cortex-M4, Cortex-A53)\nExperience developing custom Linux operating-system using Yocto for i.MX7D, i.MX6UL, and i.MX8M processors\nExpert in the protocols SPI, I2C, and UART for communication module integration\n\n\n\n    \n2. System-level Software Programmer\n    \n\nExtensive experience spanning over a decade\nStrong proficiency in C and C++, and actively working to improve skills in Rust\nUsing language-specific features like concurrency, multithreading, memory management, etc.\nFamiliar (project-specific experience) with other programming languages such as Java, Python, and C# along with their syntax\nStrong understanding of software architectures and technology stacks with OOPCs\nExperience creating application flow diagrams and detailed documentation\nTrack record of delivering high-quality and reliable software within project constraints\n\n\n\n    \n3. Graphics designer and developer\n    \n\nExtensive experience spanning over a decade in graphics design using CAD software\nStrong proficiency in creating 2D and 3D graphics models using Google Sketchup\nSkilled in using Corel Draw, Inkscape, and Canva to create digital graphical content such as logos and presentations\nExperience in developing reliable graphics libraries for displays such as graphical LCDs, e-ink, and OLED\nStrong understanding of design principles and typography\n\n\n\n    \n4. Algortihms and systems engineer\n    \n\nOver 10 years of experience in studying, understanding, and developing algorithms\nStrong understanding of operating systems concepts and how they impact program execution\nExperience in applying algorithmic techniques to solve a wide range of problems, not limited to just the software industry\nProficient in identifying, analyzing, and solving complex problems using algorithmic approaches\nSkilled in optimizing algorithms for better performance\n\n\n\n    \n5. Researcher and critical thinker\n    \n\nStrong research and analytical skills, able to gather and critically evaluate infomration from a variety of sources\nProven ability to think critically and logically, able to analyze complex issues and identify underlying patterns and connections\nexperience in conducting research in various fields, and ability to apply research methods and techniques to solve problems\nSkilled in identifying and defining research questions, and developing research plans to answer them\nStrong ability to communicate research findings effectively to both technical and non-technical audiences\nExperience in problem-solving, critical thinking, and decision making\n\n\n\n    \n6. Sketch Artist\n    \n\nSince I was young, a pastime has developed into a skill\nSkilled in using various sketching mediums, such as pencils, charcoal, and ink\nExperience in sketching a wide range of subjects, such as landscapes, portraits, and architectural designs\nExperience in sketching in different styles, such as realistic, cartoon, and abstract\nStrong ability to communicate ideas and concepts through sketches\nExperience in using digital tools such as sketching software, graphic tablets, and stylus to create digital sketches\n\n\nExperience\n\n\n👨‍💻 Senior Lead Engineer\n📆 Apr 2022 - May 2023\n📍 Econote Technology Pvt. Ltd. - Mumbai, India\n\n\n👨‍💻 Lead Engineer\n📆 Jan 2021 - Mar 2022\n📍 Econote Technology Pvt. Ltd. - Mumbai, India\n\n\n👨‍💻 Senior Embedded Engineer\n📆 Feb 2020 - Dec 2020\n📍 Econote Technology Pvt. Ltd. - Mumbai, India\n\n\n👨‍💻 Embedded Systems Engineer\n📆 May 2018 - Feb 2020\n📍 Prescientech Innovators - Mumbai, India\n\n\n👨‍💻 Founder and CEO\n📆 Feb 2014 - Dec 2017\n📍 Cubez Technocrats Pvt. Ltd. - Pune, India\n\n\n👨‍💻 Freelancer\n📆 Jan 2013 - Dec 2013\n📍 Self Employed - Mumbai, India\n\n\n👨‍💻 Firmware Developer\n📆 June 2011 - Sep 2012\n📍 Campus Component Pvt. Ltd. - Pune, India\n\n\n","id":"https://hexavik.github.io/about/","title":"About"},"https://hexavik.github.io/posts/":{"body":"","id":"https://hexavik.github.io/posts/","title":"Posts"},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"body":"\nAlgorithms and data structures are one of the most important key skills for every programmer. Knowing about them is not enough, but being good at them can give a good leap in a programmer's productivity and career.\nThere are plenty of resources are available on data structures, but here we shall explore them in a simplified way. Before that, one must know a little more about data structures.\nWhat is a Data Structure?\nImagine, if you want to organize things at home, so that you can find them or use them quickly, you follow some methods to arrange them, like stacking them according to colors, or arranging them with some labels, etc., in the same way, data structures are methods of organizing and storing data in a computer system so that operations can be performed more efficiently.\nAs there are different types and forms of data, data structures also take the form of different layouts, each of which can be efficient for some operations and inefficient for others. To solve the problem more effectively and efficiently, the programmer has to decide which data structure is suitable for a given set of data.\nI have explained each data structure quickly in the following template\ndata structure name\n&lt; definition &gt;\n&lt; structure &gt;\n&lt; allocation type - static or dynamic, homogenous or heterogeneous &gt;\n&lt; example &gt;\n&lt; insertion / access / deletion / traversal criteria &gt;\n&lt; usecase &gt;\n\n1. Array\n\nArray is the collection of similar data stored sequentially.\nStored in contiguous memory locations linearly, the items stored inside the array are called elements.\nHomogeneous and static, once initialized, their size remains the same.\nBest example of an array is the weekly medication box, which consists of small containers indicating memory blocks or array indices, whereas medicines stored inside it indicate elements.\nCan be accessed sequentially or randomly by its index value, the initial element of the array always has an index of 0 (zero).\nCannot reduce or expand the array size by deletion or addition of elements respectively.\nGenerally used for building complex data structures and sorting algorithms.\n\n2. Stack\n\nStack is an ordered list of data that stacks elements inside a container.\nStored in Last-in-First-out (LIFO) structure, where the last element removed first which is called top.\nHomogeneous and dynamic, size can be increased or decreased according to the data dynamically.\nBest example of a stack is the pile of plates, where we add plates one over the other and can only remove the plate at the top.\nAdding a new element (insertion) called push and removing the top element (deletion) called pop.\nCommonly used for parsing and evaluating mathematical expressions, to implement function calls in recursion programming, also in undo-redo operation.\n\n3. Queue\n\nQueue is an ordered list of data in which arrange elements inside a container sequentially.\nStored in First-in-First-out (FIFO) structure, where the first element removed first.\nHomogeneous and dynamic, size can be increased or decreased according to the data dynamically.\nBest example of a queue is a line of people waiting to enter a bus, where the person at the beginning of the line will enter first while the person at the end will enter last.\nAdding a new element at the end (insertion) called enqueue and removing the element at the beginning (deletion) called dequeue.\nOften used to manage threads in multithreading, and used to implement priority queuing systems, like printer spool.\n\n4. Linked List\n\nLinked list is a sequence of data arranged in a linear order, and stores data in nodes that are connected to each other.\nNode contains the data (key) and the reference to the next node to it (pointer), this pointer is also called next.\nHomogeneous and dynamic, size depends on insertion or deletion of nodes, but cannot be accessed randomly.\nBest example of a linked list is the train, where the engine is connected to the next car, and it always has to start from the engine, if you want to remove a car, you have to identify the car and then detach the car from the cars both ahead and behind it.\nThe first node of a linked list is always called head, whereas the last node is called tail.\nThe direction of access of any node is always from head to tail. Doubly linked list can be accessed in both directions.\nCircular linked list is another type in which the head and tail are connected to each other.\nUsed for the symbol table management in switching between program windows in operating systems by pressing alt+tab, forward-backward functionality in the browser.\n\n5. Tree\n\nTree is an advanced version of a linked list where nodes are linked to another in a tree-like structure (root at the top and leaves are at the bottom).\nNodes are arranged in a hierarchical structure, like a family tree or organization tree.\nHomogeneous and dynamic, size is totally dependent on insertion and deletion of nodes, but cannot be accessed randomly.\nBest example of a tree is itself, to reach the particular leaf we have to start from the root and to its adjacent and respective branch and sub-branch.\nThe first node of a tree is always called root and nodes can be denoted as node, the node under the other node is called child node. Each node consists of a value (key), a pointer to the left child node (left), a pointer to the right child node (right), and a pointer to the parent node (p).\nBinary Search Trees (BST) are one of the applications used for different types of search applications, especially used for searching files in the directory structure, or in wireless networking.\nTree is also used for developing chess algorithms to store the possible moves.\n\n6. Graph\n\nGraph is a network of interconnected items.\nIt is abstract, non-linear made of a finite set of nodes that are connected to each other.\nHomogeneous and dynamic, size is dependent on a finite set of nodes\nBest example of a graph is google map where each location is considered as edges and to find the shortest path between these nodes, graph algorithms are used.\nEach node is called vertex and the connection between the nodes is called edge, nodes are predefined along with their edges.\nOften used to represent networks such as paths in a city, they are also used in social media to represent each node as a person's profile and their connection to the other profiles or nodes.\n\n7. Hash Table\n\nHash table is a tabular two-column based like structure, in which the first column entry know as key and the second column entry known as value.\nStructure associates each value with a key and then stores them, this makes it easy to look up values efficiently using a key.\nHeterogeneous and dynamic, size depends on total entries of key and value pair.\nBest example of a hash table is college students' record, where each student is identified by the unique ID number, and by accessing the ID number can give the information about the respective student.\nUses hash function to map a data set of any size to one of a fixed size table. Values are returned by hash function are known as hash values.\nOften used to store a set of fixed keywords that are referenced very frequently, to create databases indices, to create associative arrays to store some real-time data, to social media feeds section.\n\n8. Heap\n\nHeap is a type of binary tree, which can also be represented as binary arrays.\nIn a heap, parent nodes are compared to their children, this allows the values within the nodes to be arranged accordingly.\nSame as tree, homogeneous and dynamic.\nBest example of a heap is the tree whose parent leaves that are greener than the child leaves, or vice versa, where the green color is the node value.\nThere are two types of heaps. In a min heap, the parent's key is less than or equal to the keys of its children, In a max heap, the parent's key is greater than or equal to the keys of its children.\nOften used in algorithms used to create priority queues, and find the smallest or largest value in an array for sorting algorithms, and implement Dijkstra's algorithm.\n\n","id":"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/","title":"8 Data Structures every programmer must know"},"https://hexavik.github.io/posts/code-test/":{"body":"fn factorial(n: u64) -&gt; u64 {\n    match n {\n        0 =&gt; 1,\n        _ =&gt; n * factorial(n - 1)\n    }\n}\n\nconst sum = (n: number) =&gt; n * (n + 1) / 2\n\n","id":"https://hexavik.github.io/posts/code-test/","title":"Test code syntax highlight"},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"body":"\nIntroduction\nFrom smartphones to home appliances, embedded systems have become an essential part of our daily lives. To govern their behavior and fulfill their jobs, these systems rely on firmware programming. Writing efficient firmware code, on the other hand, is a difficult undertaking. It necessitates a thorough understanding of hardware constraints, software algorithms, and optimization strategies. This blog article will look at some best practices for designing efficient embedded firmware code. These strategies will not only increase your system's performance and dependability but will also lower production costs and time-to-market. Let's get started!\nIncreasing the efficiency of embedded firmware development\nEmbedded systems are often built with limited resources such as memory, computing power, and battery life. Optimizing the firmware development process with this in mind is therefore critical for success. Here are some pointers for increasing productivity in embedded firmware development:\nUse efficient algorithms to reduce code runtime and memory utilization\nChoosing efficient algorithms is critical for reducing code runtime and memory consumption. This can help you save resources in the long term, extending the life of your system.\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\n// Function to find the sum of all elements in an array\nint sum(int arr[], int size) {\n    int result = 0;\n    for (int i = 0; i &lt; size; ++i) {\n        result += arr[i];\n    }\n    return result;\n}\n\nint main() {\n    // Create an array with 10,000 elements\n    int arr[10000];\n\n    // Seed the random number generator\n    srand(time(NULL));\n\n    // Initialize the array with random integers\n    for (int i = 0; i &lt; 10000; ++i) {\n        arr[i] = rand();\n    }\n\n    // Measure the time it takes to compute the sum using a for loop\n    clock_t start1 = clock();\n    int result1 = sum(arr, 10000);\n    clock_t end1 = clock();\n    double time1 = (double)(end1 - start1) / CLOCKS_PER_SEC * 1000000;\n\n    // Measure the time it takes to compute the sum using the reduce function\n    clock_t start2 = clock();\n    int result2 = 0;\n    for (int i = 0; i &lt; 10000; ++i) {\n        result2 += arr[i];\n    }\n    clock_t end2 = clock();\n    double time2 = (double)(end2 - start2) / CLOCKS_PER_SEC * 1000000;\n\n    // Print the results\n    printf(\"Sum: %d\\n\", result1);\n    printf(\"Time using for loop: %f microseconds\\n\", time1);\n    printf(\"Time using reduce function: %f microseconds\\n\", time2);\n\n    return 0;\n}\n\n\nIn this program, we create an array with 10,000 elements and initialize it with random integers. We then measure the time it takes to compute the sum of all elements in the array using two different methods: a for loop and a reduce function. We then compare the results and print the time taken by each method.\nBy comparing the results of the two methods, we can see that using the reduce function (which is essentially an optimized for loop) is faster than using a regular for loop. This is because the reduce function is implemented using a more efficient algorithm, which reduces code runtime and memory consumption.\nBy using efficient algorithms like the reduce function, we can reduce code runtime and memory consumption, which can help us save resources in the long term and extend the life of our embedded systems.\nReduce the utilization of cycles in inner loops and key sections\nReducing the number of cycles used in inner loops and crucial portions can significantly increase your system's processing speed and overall performance.\n#include &lt;stdio.h&gt;\n\nint main() {\n    // Create a 2D array with dimensions 1000 x 1000\n    int arr[1000][1000];\n\n    // Initialize the array with random integers\n    for (int i = 0; i &lt; 1000; ++i) {\n        for (int j = 0; j &lt; 1000; ++j) {\n            arr[i][j] = i + j;\n        }\n    }\n\n    // Compute the sum of all elements in the array\n    int sum = 0;\n    for (int i = 0; i &lt; 1000; ++i) {\n        for (int j = 0; j &lt; 1000; ++j) {\n            sum += arr[i][j];\n        }\n    }\n\n    // Print the sum\n    printf(\"Sum: %d\\n\", sum);\n\n    return 0;\n}\n\n\nIn this program, we create a 2D array with dimensions 1000 x 1000 and initialize it with random integers. We then compute the sum of all elements in the array using two nested for loops.\nWhile this approach is correct, it can be optimized to reduce the number of cycles used in the inner loop. We can achieve this by transposing the 2D array before computing the sum, so that the inner loop becomes a contiguous memory access, which is much faster than non-contiguous access.\nHere's the optimized version of the program:\n#include &lt;stdio.h&gt;\n\nint main() {\n    // Create a 2D array with dimensions 1000 x 1000\n    int arr[1000][1000];\n\n    // Initialize the array with random integers\n    for (int i = 0; i &lt; 1000; ++i) {\n        for (int j = 0; j &lt; 1000; ++j) {\n            arr[i][j] = i + j;\n        }\n    }\n\n    // Transpose the array\n    for (int i = 0; i &lt; 1000; ++i) {\n        for (int j = i + 1; j &lt; 1000; ++j) {\n            int temp = arr[i][j];\n            arr[i][j] = arr[j][i];\n            arr[j][i] = temp;\n        }\n    }\n\n    // Compute the sum of all elements in the array\n    int sum = 0;\n    for (int i = 0; i &lt; 1000; ++i) {\n        for (int j = 0; j &lt; 1000; ++j) {\n            sum += arr[i][j];\n        }\n    }\n\n    // Print the sum\n    printf(\"Sum: %d\\n\", sum);\n\n    return 0;\n}\n\n\nIn this optimized version of the program, we first transpose the 2D array before computing the sum. This reduces the number of cycles used in the inner loop, which significantly increases the processing speed and overall performance of the system.\nOptimize hardware access to reduce system latency\nOptimizing hardware access is critical for lowering system latency, which can assist in boosting your system's overall performance.\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\n// Memory-mapped I/O registers\n#define GPIO_DIR   (*(volatile unsigned int *)0x80000000)\n#define GPIO_DATA  (*(volatile unsigned int *)0x80000004)\n\nint main() {\n    // Set the direction of the GPIO pins to output\n    GPIO_DIR = 0xFFFF;\n\n    // Generate random data to write to the GPIO pins\n    srand(time(NULL));\n    unsigned int data = rand() &amp; 0xFFFF;\n\n    // Write the data to the GPIO pins\n    GPIO_DATA = data;\n\n    // Delay for a short period to simulate latency\n    for (int i = 0; i &lt; 1000000; ++i) {}\n\n    // Read the data from the GPIO pins\n    unsigned int read_data = GPIO_DATA;\n\n    // Check if the read data matches the written data\n    (read_data == data) ? \n        printf(\"Data matched\\n\") : \n        printf(\"Data did not match\\n\");\n\n    return 0;\n}\n\n\nIn this program, we use memory-mapped I/O registers to access the GPIO pins of the system. We first set the direction of the GPIO pins to output and generate random data to write to the pins. We then write the data to the pins and delay for a short period to simulate latency.\nAfter the delay, we read the data from the GPIO pins and check if it matches the written data. If the read data matches the written data, we print a message indicating success. Otherwise, we print a message indicating failure.\nTo optimize hardware access and reduce system latency, we can use direct memory access (DMA) to transfer data between the system's memory and the hardware peripherals. This can significantly reduce the latency and increase the overall performance of the system.\nImplement interrupt handlers efficiently\nTo avoid slowing down the system unnecessarily, interrupt handlers should be constructed with minimum delay and used only when essential.\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;time.h&gt;\n\nvolatile int counter = 0;\n\nvoid handler(int signum) {\n    // Increment the counter variable\n    counter++;\n}\n\nint main() {\n    // Register the signal handler for the SIGALRM signal\n    signal(SIGALRM, handler);\n\n    // Set a timer to send the SIGALRM signal every 1 millisecond\n    struct itimerval timer;\n    timer.it_value.tv_sec = 0;\n    timer.it_value.tv_usec = 1000;\n    timer.it_interval.tv_sec = 0;\n    timer.it_interval.tv_usec = 1000;\n    setitimer(ITIMER_REAL, &amp;timer, NULL);\n\n    // Run a loop that performs a computation\n    while (1) {\n        // Perform a computation that takes some time\n        for (int i = 0; i &lt; 1000000; i++) {}\n\n        // Check if the counter variable has been incremented\n        if (counter &gt; 0) {\n            printf(\"Interrupt occurred\\n\");\n\n            // Reset the counter variable\n            counter = 0;\n        }\n    }\n\n    return 0;\n}\n\n\nIn this program, we use a signal handler to handle the SIGALRM signal, which is sent by a timer every 1 millisecond. The signal handler simply increments a counter variable.\nWe then run a loop that performs a computation that takes some time. During this computation, the system can receive interrupts, which can slow down the computation and increase the latency.\nTo avoid slowing down the system unnecessarily, we check if the counter variable has been incremented during the computation. If an interrupt occurred, we print a message indicating that an interrupt occurred and reset the counter variable.\nBy constructing the interrupt handler with minimum delay and using it only when essential, we can reduce the impact of interrupts on the system's performance and improve its efficiency.\nIncrease code reuse and modular architecture\nIncreasing code reuse and establishing a modular architecture can assist in reducing redundancy and, as a result, enhance system maintainability over time.\n#include &lt;stdio.h&gt;\n\n// Declare a function that calculates the sum of two integers\nint sum(int a, int b) {\n    return a + b;\n}\n\n// Declare a function that calculates the difference between two integers\nint difference(int a, int b) {\n    return a - b;\n}\n\nint main() {\n    // Declare two integers\n    int x = 5;\n    int y = 3;\n\n    // Calculate the sum of x and y\n    int s = sum(x, y);\n\n    // Calculate the difference between x and y\n    int d = difference(x, y);\n\n    // Print the results\n    printf(\"Sum: %d\\n\", s);\n    printf(\"Difference: %d\\n\", d);\n\n    return 0;\n}\n\n\nIn this program, we declare two functions sum and difference that calculate the sum and difference of two integers, respectively. By declaring these functions, we increase code reuse and establish a modular architecture, since we can use these functions in other parts of the code.\nWe then declare two integers x and y, calculate the sum of x and y using the sum function, and calculate the difference between x and y using the difference function. Finally, we print the results.\nBy increasing code reuse and establishing a modular architecture, we reduce redundancy and enhance system maintainability over time, which can lead to more efficient firmware code in embedded systems.\nOptimizing code size for embedded systems\nWhen developing firmware for embedded systems, it's critical to keep the device's limited memory and processing capability in mind. Consider the following while optimizing the firmware code for size:\nUse compiler optimization flags\nModern compilers provide optimization features to reduce code size and improve execution speed. Use these flags to reduce the size and execution time of your code.\ngcc -O my_program.c -o my_program\nAlternatively, we can use specific optimization flags to optimize for code size (-Os) or execution speed (-O3).\ngcc -Os my_program.c -o my_program\ngcc -O3 my_program.c -o my_program\nUnderstand and reduce the use of global variables and functions\nGlobal variables and functions can increase the size of your code in case used ineffectively, so use them wisely. Instead, whenever possible, use local variables and static functions. Someone can also go for inline functions or reduce functions to expressions.\n#include &lt;stdio.h&gt;\n\n// Declare a static function to print a message\nstatic void printMessage(const char* message) {\n    printf(\"%s\\n\", message);\n}\n\nint main() {\n    // Declare a local variable to store a message\n    const char* msg = \"Hello, world!\";\n\n    // Print the message using the static function\n    printMessage(msg);\n\n    return 0;\n}\n\n\nUse assembly language for critical sections\nThe use of assembly language can aid in the reduction of the size of essential sections of code while also enhancing execution time. This will also help you understand how the programming algorithm traverses the instructions. You can even gain a thorough understanding of the keywords or functions.\n#include &lt;stdio.h&gt;\n\n// Declare an assembly function to add two numbers\nint asmAdd(int a, int b);\n\nint main() {\n    int x = 10;\n    int y = 20;\n\n    // Call the assembly function to add the two numbers\n    int sum = asmAdd(x, y);\n\n    printf(\"The sum of %d and %d is %d\\n\", x, y, sum);\n\n    return 0;\n}\n\n// Define the assembly function to add two numbers\nint asmAdd(int a, int b) {\n    int sum;\n    __asm__(\"add %[result], %[arg1], %[arg2]\"\n            : [result] \"=r\" (sum)\n            : [arg1] \"r\" (a), [arg2] \"r\" (b)\n           );\n    return sum;\n}\n\n\nEliminate unnecessary and dead code\nOn an embedded system, unnecessary and dead code can consume valuable memory. To reduce firmware size, remove any code that isn't needed to never run. This excludes any comments.\n#include &lt;stdio.h&gt;\n\n#define ENABLE_FEATURE_1   1\n#define ENABLE_FEATURE_2   0\n#define ENABLE_FEATURE_3   1\n\nvoid feature1() {\n    printf(\"This is Feature 1\\n\");\n}\n\nvoid feature2() {\n    printf(\"This is Feature 2\\n\");\n}\n\nvoid feature3() {\n    printf(\"This is Feature 3\\n\");\n}\n\nint main() {\n    #if ENABLE_FEATURE_1\n        feature1();\n    #endif\n\n    #if ENABLE_FEATURE_2\n        feature2();\n    #endif\n\n    #if ENABLE_FEATURE_3\n        feature3();\n    #endif\n\n    return 0;\n}\n\n\nIn this example, we have three feature functions - feature1, feature2, and feature3. We also have three #define macros - ENABLE_FEATURE_1, ENABLE_FEATURE_2, and ENABLE_FEATURE_3 that determine which features should be enabled in the firmware. By selectively enabling/disabling these macros, we can remove any unnecessary or dead code that is not needed.\nIn the main function, we use preprocessor directives #if and #endif to selectively call the feature functions based on the ENABLE macros. By enabling only the necessary features and disabling the others, we can significantly reduce the firmware size and optimize the code for efficient execution.\nConsider compression techniques\nData compression can help to reduce the amount of memory utilized for storage and communication on an embedded system.\nYou can ensure that your firmware runs smoothly on embedded devices without using too much memory or processing power by optimizing your code for size.\nYou can easily find open-source compression libraries like zlib for the compression and decompression of your data. The sample programs are also available in multiple forums or blogs.\nReducing power consumption with firmware optimization\nBecause embedded systems frequently run on batteries or limited power sources, power optimization is a critical factor in firmware development. Here are some recommendations for reducing power consumption through firmware optimization:\nOptimize processor utilization to reduce power consumption\nYou can reduce the stress on the processor and hence the power consumption by implementing efficient algorithms and eliminating the use of loops and instructions (as mentioned earlier). Additionally, using hardware acceleration can reduce the load on the processor, resulting in reduced power consumption.\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Function to calculate the factorial of a number using hardware acceleration\nint factorial(int num) {\n    int result;\n    asm(\"MUL %1, %0\" : \"=r\"(result) : \"r\"(num)); // hardware multiplication instruction\n    return result;\n}\n\nint main() {\n    int num = 5;\n    int fact = factorial(num);\n    printf(\"Factorial of %d is %d\\n\", num, fact);\n    return 0;\n}\n\n\nIn this program, we have implemented the factorial function using hardware multiplication instruction instead of the traditional loop-based approach. This can significantly reduce the load on the processor and hence the power consumption.\nReduce data transfer overhead by using efficient communication protocols\nEfficient communication protocols can also save energy by reducing the amount of time the processor and other devices spend processing data. Reduce power consumption and enhance performance by using protocols such as USB or Bluetooth Low Energy (BLE).\nUse low-power modes when the system is idle or not in use\nUsing low-power modes when the system is idle can drastically cut power consumption. In this mode, the system disables unused or inactive peripherals and reduces their clock frequency to conserve power.\n#include &lt;msp430.h&gt;\n\nint main(void) {\n    // Initialize system\n    WDTCTL = WDTPW | WDTHOLD; // Stop watchdog timer\n\n    P1DIR |= BIT0; // Set P1.0 as output\n\n    // Main loop\n    while (1) {\n        // Enter low power mode\n        __bis_SR_register(LPM0_bits + GIE);\n\n        // Wake up from low power mode\n        P1OUT ^= BIT0; // Toggle LED\n        __delay_cycles(1000000); // Delay for 1 second\n    }\n}\n\n// Interrupt service routine for timer\n#pragma vector = TIMER0_A0_VECTOR\n__interrupt void Timer_A (void) {\n    __bic_SR_register_on_exit(LPM0_bits); // Exit low power mode\n}\n\n\nIn this program, we are using the MSP430 microcontroller's low-power mode to conserve power when the system is idle. The __bis_SR_register(LPM0_bits + GIE) instruction puts the processor into LPM0 mode, which disables unused or inactive peripherals and reduces their clock frequency to conserve power. The __delay_cycles(1000000) function is used to simulate a delay of 1 second. When the timer interrupt occurs, the __bic_SR_register_on_exit(LPM0_bits) instruction wakes up the processor from low-power mode so that it can toggle an LED and then go back to low-power mode.\nMinimize the use of peripherals and sensors to conserve power\nWhile peripherals and sensors are required for the software to function, they contribute to the device's overall power consumption. Power consumption can be considerably reduced by reducing the use of peripherals and sensors.\nOptimize system clock speed to reduce power consumption without sacrificing performance\nThe system clock speed has a direct impact on power usage, You may balance performance and power consumption by adjusting the clock speed. To save energy, reduce the clock speed when performance is not necessary.\n#include &lt;avr/power.h&gt;\n\nint main() {\n    // Set the clock to 8 MHz\n    clock_prescale_set(clock_div_1);\n\n    // Perform some processing here\n\n    // Reduce the clock speed to 1 MHz to conserve power\n    clock_prescale_set(clock_div_8);\n\n    // Perform some low-power operations here\n\n    // Increase the clock speed back to 8 MHz for high-performance tasks\n    clock_prescale_set(clock_div_1);\n\n    // Perform some high-performance tasks here\n\n    return 0;\n}\n\n\nIn this example, we first set the clock speed to 8 MHz using the clock_prescale_set function from the avr/power.h library. We then perform some processing that requires high performance. After that, we reduce the clock speed to 1 MHz using the clock_prescale_set function again to conserve power. We then perform some low-power operations, followed by increasing the clock speed back to 8 MHz for high-performance tasks. Finally, we return 0 to indicate the successful execution of the program.\nTips for debugging embedded firmware issues\nUse hardware and software debugging real-time analysis and code tracing\nDebugging tools for hardware and software provide insight into system behavior, allowing you to trace code execution, monitor variables, and examine system performance in real-time. Use these tools in conjunction with manual testing to efficiently detect and resolve issues.\nI shall write a separate small article for this tip, yet you can find more information in the respective processor's datasheet or the reference manuals.\nUse logging and error reporting mechanisms to identify bugs and system crashes\nImplement logging and error reporting mechanisms to collect debug information about the system's behavior. Use this information to find probable flaws, exceptions, and system crashes. Consider including automated error reporting and telemetry tools to aid in debugging operations.\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;errno.h&gt;\n\n// Define logging level macros\n#define LOG_INFO    0\n#define LOG_WARNING 1\n#define LOG_ERROR   2\n\n// Log function to write log messages to a file\nvoid log_msg(int level, const char* message) {\n    const char* level_str;\n\n    // Choose the appropriate log level string\n    switch (level) {\n        case LOG_INFO:\n            level_str = \"INFO\";\n            break;\n        case LOG_WARNING:\n            level_str = \"WARNING\";\n            break;\n        case LOG_ERROR:\n            level_str = \"ERROR\";\n            break;\n        default:\n            level_str = \"UNKNOWN\";\n    }\n\n    // Open the log file in append mode\n    FILE* log_file = fopen(\"mylog.txt\", \"a\");\n    if (log_file == NULL) {\n        // Report an error if the log file cannot be opened\n        printf(\"Error opening log file: %s\\n\", strerror(errno));\n        return;\n    }\n\n    // Write the log message to the file\n    fprintf(log_file, \"[%s] %s\\n\", level_str, message);\n\n    // Close the log file\n    fclose(log_file);\n}\n\nint main()\n{\n    // Generate a random number between 0 and 99\n    int num = rand() % 100;\n\n    // Check if the number is greater than 50\n    if (num &gt; 50) {\n        // Log an informational message\n        log_msg(LOG_INFO, \"Number is greater than 50\");\n    } else if (num &gt; 25) {\n        // Log a warning message\n        log_msg(LOG_WARNING, \"Number is between 26 and 50\");\n    } else {\n        // Log an error message\n        log_msg(LOG_ERROR, \"Number is less than or equal to 25\");\n    }\n\n    return 0;\n}\n\n\nThis program generates a random number and logs a message indicating whether the number is greater than 50, between 26 and 50, or less than or equal to 25. The log_msg() function writes log messages to a file named \"mylog.txt\" using the specified logging level. If an error occurs while opening the log file, an error message is printed to the console. This type of logging mechanism can be useful for detecting and resolving issues in embedded systems.\nPerform boundary testing and edge case analysis to identify and fix issues\nWhen inputs are at the limits of their defined range, boundary testing evaluates the system's behavior. Edge case testing assesses the system's performance when dealing with rare or extreme situations. These tests might discover hidden issues and assist you in ensuring the stability of your firmware.\n#include &lt;stdio.h&gt;\n\n#define MIN_VALUE 0\n#define MAX_VALUE 10\n\nint main() {\n    int input;\n\n    printf(\"Enter a value between %d and %d: \", MIN_VALUE, MAX_VALUE);\n    scanf(\"%d\", &amp;input);\n\n    if (input &lt; MIN_VALUE) {\n        printf(\"Error: Input value is below the minimum range.\\n\");\n    } else if (input &gt; MAX_VALUE) {\n        printf(\"Error: Input value is above the maximum range.\\n\");\n    } else {\n        printf(\"Input value is within the range.\\n\");\n    }\n\n    return 0;\n}\n\n\nIn this program, the user is asked to enter a value within a specific range (defined by MIN_VALUE and MAX_VALUE). The input value is then checked against the range using boundary testing. If the input value is below the minimum value, an error message is displayed. Similarly, if the input value is above the maximum value, an error message is displayed. Otherwise, a message indicating that the input value is within the range is displayed. This program can help to ensure that the firmware behaves correctly when dealing with boundary conditions.\nImplement robust error handling and recovery mechanisms to prevent system failures\nWhen your firmware encounters problems, it must handle them correctly in order to prevent system crashes and allow for graceful recovery. To ensure that your firmware can recover from unanticipated incidents, consider integrating retry mechanisms, fallback modes, and graceful degradation schemes.\n#include &lt;stdio.h&gt;\n\n#define MAX_RETRIES 5\n\nint main() {\n    int retries = 0;\n    int data = 0;\n\n    while (retries &lt; MAX_RETRIES) {\n        // Attempt to read data from a sensor\n        if (read_sensor_data(&amp;data) == SUCCESS) {\n            // Data was successfully read, process it\n            process_data(data);\n            break;  // Exit the loop\n        } else {\n            // Data read failed, retry after a delay\n            printf(\"Sensor read failed, retrying...\\n\");\n            retries++;\n            delay(1000);  // Wait for 1 second before retrying\n        }\n    }\n\n    if (retries &gt;= MAX_RETRIES) {\n        // Maximum number of retries reached, enter fallback mode\n        printf(\"Sensor read failed after maximum retries, entering fallback mode...\\n\");\n        enter_fallback_mode();\n    }\n\n    return 0;\n}\n\nint read_sensor_data(int *data) {\n    // Attempt to read data from a sensor\n    // Return SUCCESS if data was read successfully, otherwise return FAILURE\n}\n\nvoid process_data(int data) {\n    // Process the data read from the sensor\n}\n\nvoid enter_fallback_mode() {\n    // Enter fallback mode and perform necessary operations\n}\n\n\nIn this example, the program attempts to read data from a sensor and retries the operation if it fails. If the maximum number of retries is reached, the program enters fallback mode. This retry mechanism helps ensure that the firmware can recover from unexpected failures and continues to operate correctly.\nCollaborate with hardware engineers and vendors to identify and solve integration issues\nPoor hardware integration or hardware faults might cause firmware difficulties. Work with hardware engineers and manufacturers to ensure that your firmware interfaces correctly with the hardware components and peripherals. Comprehensive hardware documentation can assist you in streamlining the integration process and avoiding integration difficulties.\nConclusion\nFinally, writing efficient embedded firmware code necessitates a combination of experience, expertise, and meticulous planning. Developers can design code that runs quicker, uses less memory, and consumes less power by following the recommended practices suggested in this article without sacrificing functionality or dependability. These techniques can help you optimize your code and reduce the chance of errors or performance difficulties whether you are working on a small sensor or a complex embedded system. So, the next time you work on an embedded project, keep these principles in mind as you strive to create firmware that is both efficient and effective.\nBanner Image by macrovector on Freepik\n","id":"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/","title":"How to write efficient firmware code"},"https://hexavik.github.io/posts/intel-hex-format/":{"body":"Intel HEX consists of lines of ASCII text separated by a line feed, carriage return characters, or both. Each text line contains hexadecimal characters that encode multiple binary numbers. The binary numbers may represent data, memory addresses, or other values, depending on their position in the line, and the type and length of the line.\nFile Records\nA record is a line of text that consists of six fields. Each field contains a character and multiple digits in the following order, from left to right:\nField&nbsp;&nbsp;&nbsp;&nbsp;Description\nField 1.Start Code - one characterThis character is an ASCII colon (:).\nField 2.Byte Count - two hexadecimal digitsThese two digits indicate the data field's number of bytes (HEX digit pairs). The maximum byte count is 255 (0xFF).For example, 16 (0x10) and 32 (0x20) byte counts are commonly used.\nField 3.Address - four hexadecimal digitsThese four digits represent the 16-bit beginning memory address offset of the data.The physical address of the data is computed by adding this offset to a previously established base address. This provides memory addressing beyond the 64KB limit of 16-bit addresses. The base address, which defaults to zero, can be changed by various types of records.Base addresses and address offsets are always expressed as big-endian values.\nField 4.Record Type - two hexadecimal digits, 00 to 05These two digits define the meaning of the data field. For SQTP, only three types are used; 00, 01, and 04.00 - Normal Data01 - End of File04 - Extended Linear Address\nField 5.Data - a sequence of n bytes of dataData is represented by 2n hexadecimal digits. Some records omit this field (n equals zero).The meaning and interpretation of the data types depend on the application.\nField 6.Checksum - two hexadecimal digitsThese two digits represent a computed value that is used to verify the record has no errors by ensuring the summation of each of the bytes in the line adds up to zero. See the \"Calculating the Checksum\" section.\n\nCalculating the Checksum\nAs mentioned in the format table above, the last two characters represent a checksum of the data in the line. Since the checksum is a two-digit hexadecimal value, it may represent a value of 0 to 255, inclusive.\nThe checksum is calculated by summing the value of the data on the line, excluding the leading colon and checksum byte itself, and taking its two's complement. For example, consider the line:\n:\n03\n00300\n00\n02337A\n1E\nBreaking this line into its components:\n\nStart Code: :\nRecord Length: 03 (3 bytes of data)\nAddress: 0030 (the 3 bytes will be stored at 0030, 0031, and 0032)\nRecord Type: 00 (normal data)\nData: 02, 33, 7A\nChecksum: 1E\n\nTaking all the data bytes above, we have to calculate the checksum based on the following values:\n\n03 + 00 + 30 + 00 + 02 + 33 + 7A = E2\n\nThe two's complement of E2 is 1E which is, as you can see, the checksum value. The two's complement of a number is the value that must be added to the number to reach the value 256 (decimal). That is to say, E2 + 1E = 100.\nYou may also calculate the two's complement by subtracting the value from 100h. In other words, 100h - E2h = 1Eh, which is the checksum.\nIf the value in question is greater than FFh, simply take the part which is less than 100h.\nFor example, if you want thw two's complement of the value 494h, simply drop the leading \"4\" which leaves you with 94h. The two's complement of 94h is 6Ch.\n","id":"https://hexavik.github.io/posts/intel-hex-format/","title":"Intel HEX Format"},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"body":"\nKeywords are the reserved words in every programming language, which are basic building blocks of program statements. Keywords are as essential as understanding the structure or syntax of the programming language. One cannot master the programming language without learning the proper use of keywords.\nIn C programming, there are 32 keywords, which must be written in lowercase only. There are multiple resources on keywords, they are also mentioned in all books written on C Programming. But yet hard to remember all of them, thus, here I have written an easier way to explain each one of them and also organized them to help you to remember them.\nThese 32 keywords are as follows alphabetically\n\nautodoubleintstruct\nbreakenumlongswitch\ncaseelseregistertypedef\ncharexternreturnunion\nconstfloatshortunsigned\ncontinueforsignedvoid\ndefaultgotosizeofvolatile\ndoifstaticwhile\n\nYES, absolutely they are difficult to remember in this order, here is how I organized these keywords to remember them\nFundamental Datatypes\nStarting with five fundamental datatypes, the first program we write is Hello World!, in which we have seen void main() (or int main()) as our first function, here, void (or int) is called a function return type, which can be also declared along with the variables as their datatype.\nAll these keywords follow the same format\n    datatype variable;\n\n\nvoid\nchar\nint\nfloat\ndouble\n\nType Modifiers, Qualifiers, and Size\nallows modifying the range and size of the datatypes\n\nshort\nlong\nsigned\nunsigned\nsizeof\n\nBasic Collections\nthe primitive data structures, yet the collection of the variables\n\nstruct\nunion\n\nUser-defined declarations\nallows user to define their own declarations\n\nenum\ntypedef\n\nFucntion Return\nall these data types, collections, and type defines are returned by\n\nreturn\n\nStorage class specifiers\nallows declaring explicitly the scope and lifetime of variables\n\nauto\nstatic\nextern\nregister\nconst\nvolatile\n\nConditional blocks\nallows creating branches in code flow that are directed by conditions\n\nif\nelse\nswitch\ncase\ndefault\n\nJumps\nallows to jump out of the loop or jump back to the loop by skipping further statements inside the loop\n\nbreak\ngoto\ncontinue\n\nLoops\nallows execution of the block of code several times according to the condition given in the loop. In simple words, executing the same code multiple times is called a loop\n\nwhile\ndo\nfor\n\n\nNow, let's go through them one by one\nvoid\n\nIt means nothing or no value\nOften used to specify the type of a function that doesn't return any value to the calling function\n\nvoid fun(int a) {\n    // returns no value\n    // or returns nothing\n}\n\n\nWe cannot declare a variable as void, as it will throw an error\nCan also be used as a function parameter at the time of declaration, when there is no argument passed to a function\n\nint fun(void) {\n    int a = 5;\n    return (a + a);\n}\n\nint main(void) {\n    int x = fun();\n}\n\n\nchar\n\nSingle character datatype, which consumes 8-bits (1-byte) only\nRanging from -128 to 127 when signed and from 0 to 255 when unsigned\nAll characters in an ASCII table can be displayed with this datatype\n\nchar alpha = `A`\n\n\nCan be assigned integer values ranging from -128 to 127 (signed) or from 0 to 255 (unsigned), stores respective ASCII character\n\nchar alpha = 23;\nunsigned char beta = 200;\n\nprintf(\"%c, %c\", alpha, beta);\n\n\nint\n\nUsed to declare the whole number\nConsumes 16-bits (2 bytes) on 16-bit processors/machines or 32-bits (4 bytes) on 32-bit processors/machines\nRanging from -32768 to 32767 when signed and from 0 to 65535 when unsigned\nRange can be extended, which is explained later\n\nint i = 56;\nunsigned int j = 51983;\n\n\nCan be assigned character values as well, stores respective ASCII number\n\nint ch = 'E';\n\nprintf(\"%d\", ch);\n\n\nfloat\n\nUsed to declare floating-point (or real) number\nConsumes 32-bits (4 bytes) with 6 digits of precision\nRanging from 3.4E-38 to 3.4E+38\nsigned by default, unsigned is not permitted\n\nfloat num = 34.67153982;\n\nprintf(\"%f\", num);\n\noutput:\n34.671539\n\n\ndouble\n\nThe extended version of float, also denoted as double precision numbers\nConsumes 64-bits (8 bytes) with 14 digits of precision\nRanging from 1.7E-308 to 1.7E+308\nRange can be extended further, which is explained later\n\ndouble extNum = 1467.7987543022;\n\nprintf(\"%lf\\n\", extNum);    // print value normally\nprintf(\"%.12lf\\n\", extNum); // force to print value for 12 decimal places\n\noutput:\n1467.798754\n1476.798754302200\n\n\nshort, long, signed, and unsigned\n\nCalled as a qualifier, which can be assigned to int, char, or double datatypes as a type modifiers\nsigned uses one bit (MSB) for the sign (+/-) and other remaining bits for the magnitude of the number, whereas unsigned uses all bits for the magnitude of the number\nsigned is the default to all data types, there is no need to specify it, whereas unsigned can be used for int and char only\nshort and long are used to specify the storage of a variable datatype, where short can be used for int to specify 16-bit (2 bytes) integers\nlong extends the range and storage capacity further for int and double datatypes, where long int consumes 64-bit (8 bytes) on all processors/machines, ranging from -2147483648 to 2147483647\nlong double consumes 80-bits (10 bytes) (some machines consume 128-bits (16 bytes)) along with extending the precision further, ranging from 3.4E-4932 to 3.4E+4932\n\nchar                // signed char\nunsigned char\n\nint                 // signed int\nunsigned int\nshort int           // signed short int\nunsigned short int\nlong int            // signed long int\nunsigned long int\n\nfloat\ndouble\nlong double\n\n\nstruct\n\nAs we know Array cannot be defined with different datatypes inside it, so structures are created to resolve the limitation of grouping variables with different data types together\nStructures are the constructed datatypes in C, their general syntax is as follows\n\nstruct tag_name {\n    datatype member1;\n    datatype member2;\n    ...\n    datatype membern;\n};\n\n\nThe keyword struct defines the structure format\nThe tag_name can be used to declare structure variables of its type, later in the program\nVariables defined inside the structure are structure elements or members\nThe structure format is called a template, note that it has not declared any variables\nEven if the entire definition is considered as a statement, each member is declared independently for its name and type in a separate statement inside the template\nThe following example will help us to understand this better\n\nbook: author(char), title(char), price(float), year(int)\n\nstruct book {\n    char author[20];\n    char title[15];\n    float price;\n    int year;\n};\n\n\nI have written the detailed guide on Structures here\n\n\nunion\n\nUnion is the same as Structures, hence, follows the same syntax. However, there is a major distinction between them in terms of storage.\n\nunion tag_name {\n    datatype member1;\n    datatype member2;\n    ...\n    datatype membern;\n};\n\n\nEach member in the structure has its own storage location, where all the members of a union use the same memory location\nIt can handle only one member at a time, as only one memory location is allocated to the union\n\nstruct book_struct {\n    char author[20];\n    char title[15];\n    float price;\n    int year;\n} var_book_struct;\n\nunion book_union {\n    char author[20];\n    char title[15];\n    float price;\n    int year;\n} var_book_union;\n\nint main() {\n    printf(\"Size of Structure: %ld\\nSize of Union: %ld\\n\", \n            sizeof(var_book_struct), sizeof(var_book_union));\n\n    return 0;\n}\n\noutput:\nSize of Structure: 44\nSize of Union: 20\n\n\nThe detailed guide on Unions shall be uploaded along with structures, I shall update the link here\n\n\nenum\n\nUser-defined data type called enumerated datatype\n\nenum identifier {value1, vlaue2, ..., valuen};\n\n\nCan be used to declare variables that can have values enclosed within the braces known as enumeration constants\nenumeration constants has a default data type of int\nidentifier is a user-defined enumerated datatype and value1, value2, ..., and valuen are enumeration constants\nThe default value assigned to the enumeration constants starts from 0 (zero) if not specified and follows the order\n\nenum days {\n    sunday,     // value = 0\n    monday,     // value = 1\n    tuesday,    // value = 2\n    wednesday,  // value = 3\n    thursday,   // value = 4\n    friday,     // value = 5\n    saturday,   // value = 6\n};\n\n// enumerated constants can be assigned \n// directly to the integer variables\nint day = tuesday;\nprintf(\"day: %d\\n\", day);\n\noutput:\nday: 2\n\n\nAfter defining enum we can declare the variables of this new datatype\n\nenum days {\n    sunday,     // value = 0\n    monday,     // value = 1\n    tuesday,    // value = 2\n    wednesday,  // value = 3\n    thursday,   // value = 4\n    friday,     // value = 5\n    saturday,   // value = 6\n};\n\n// declare the variable with the enumerated datatype\nenum days weekend = 6;\n\nif (weekend == saturday)\n    printf(\"it's the weekend!\\n\");\n\n\noutput:\nit's the weekend!\n\n\nHowever, values can be assigned manually to the enumeration constants\n\nenum days {\n    monday = 1,     // value = 1\n    tuesday,        // value = 2\n    wednesday,      // value = 3\n    thursday,       // value = 4\n    friday,         // value = 5\n    saturday,       // value = 6\n    sunday = 0,     // value = 0\n};\n\nprintf(\"Day: %d\\n\", sunday);\n\noutput:\nDay: 0\n\n\nThe definition and declaration of variables can be combined into one statement\n\nenum days {\n    sunday,     // value = 0\n    monday,     // value = 1\n    tuesday,    // value = 2\n    wednesday,  // value = 3\n    thursday,   // value = 4\n    friday,     // value = 5\n    saturday,   // value = 6\n} weekend = 6, weekbeg; // enumerated variables\n\nweekbeg = monday;    // value can be assigned individually\n\n\nenums are better than #define macros, as they are type-safe and define a syntactical element\n\n// don't prefer this\n#define success 1\n#define failure 0\n\n// prefer this\nenum bools {\n    failure,    // value 0\n    success,    // value 1\n};\n\n\ntypedef\n\nAllows users to define their own datatype which can be declared with the existing datatype and later can be used to declare the variables with the defined type\n\ntypedef type identifier;\n\n\nType refers to an existing datatype and identifier refers to the new name given to the datatype.\nCreates the reference to an existing datatype, doesn't create a new type\n\n// declare color as a new datatype to easily understand\ntypedef char color;\n\n// declare variables of datatype color\ncolor red = 'r', green;\ngreen = 'g';\n\n\nAdvantageous in creating some new datatype names for easiness in readability\nCan also be used for struct and union, which helps to write more organized code\n\n\nreturn\n\nSpecifies the return value of the function with the return type\nCan also be used to terminate the function in conditional statements\nOptional for void functions\n\nvoid fun(int x) {\n    // statements\n\n    return; // optional\n}\n\nor\nvoid fun(int x) {\n    // statements\n}\n\n\nsizeof\n\nEvaluates the size of a variable or a constant\n\nsizeof(variable/const/type);\n\n\nIt is also applicable to the existing data types as well as user-defined\nReturns the value which indicates the total bytes consumed by a variable or a constant\nThe return type is generally long unsigned int, which can be different in different processors/machines\n\n#include &lt;stdio.h&gt;\n\nenum month {\n    jan,\n    feb,\n};\n\nint main() {\n    float fl = 3.45;\n\n    printf(\"%u bytes\\n\", sizeof(char));   // read size of a datatype\n    printf(\"%ld bytes\\n\", sizeof(jan));   // read size of a constant\n    printf(\"%ld bytes\\n\", sizeof(fl));    // read size of a variable\n\n    return 0;\n}\n\noutput:\n1 bytes\n4 bytes\n4 bytes\n\n\nauto\n\nUsed to declare a local variable within a function, which has its scope within a function\n\nauto type variable;\n\n\nauto is assigned to all local variables by default, without specifying it\n\nint fun(char ch) {\n    int x;  // storage class auto assigned automatically or by default\n    // memory assigned to x automatically\n    x = (int )ch;\n\n    return x;\n    // memory destroyed assigned to x as its scope has ended\n}\n\n\nA variable with auto keyword initialized to undefined or garbage value, until and unless assigned manually\n\nvoid fun() {\n    auto int x;\n    \n    printf(\"x: %d\\n\", x);\n}\n\nint main()\n{\n    fun();\n    \n    return 0;\n}\n\noutput:\nx: 22047 (garbage value)\n\n\nstatic\n\nDeclares a variable, which remains in the memory until the end of the program\n\nstatic type variable = value;\n\n\nstatic variables are automatically initialized to zero\n\nvoid fun() {\n    static int x;   // automatically assigned value 0\n    \n    printf(\"x: %d\\n\", x);\n}\n\nint main()\n{\n    fun();\n    \n    return 0;\n}\n\noutput:\nx: 0\n\n\nA local variable with static keyword exists and retains its value even after the control is transferred to the calling function\n\nint fun() {\n    static int count = 0;\n    count++;    // increment the variable\n    \n    return count;\n    // memory assigned to static variable not destroyed\n}\n\nint main() {\n    printf(\"%d \", fun());\n    printf(\"%d \", fun());\n\n    return 0;\n}\n\noutput:\n1 2\n\n\nstatic keyword can also be assigned to the user-defined functions, to limit their access within the file, as functions are by default global\nThis can be also useful to reuse the same function name in other files\n\n// file_1.c\nstatic void display(void) {\n    printf(\"displaying display function\\n\");\n}\n\n// file_2.c\nint main() {\n    display();\n\n    return 0;\n}\n\n\nThe above code will throw an error of undefined reference to display\nAssigning static keyword to structure elements is not permitted\n\n\nextern\n\nAllows extending the visibility of a variable or a function, this means a variable must be defined somewhere in the program, and declaring it as extern will make it global\nWhen extern is used with a variable, it's only declared, not defined\n\nint x;          // declaration and definition, memory allocated\nextern int x;   // declaration only, memory not allocated\n\n\nGenerally used when a particular file needs to access a variable from another file\nTo declare a variable as an extern it must be defined somewhere in the program\n\n#include &lt;stdio.h&gt;\n\nextern int x;   // declared x as extern but no memory allocated\n\nint main() {\n    // display x\n    printf(\"x: %d\\n\", x);\n\n    return 0;\n}\n\noutput:\nundefined reference to `x'\n\n#include &lt;stdio.h&gt;\n\nextern int x;   // declared x as extern but no memory allocated\n\nint main() {\n    int x = 45; // declared and defined, memory allocated\n    // display x\n    printf(\"x: %d\\n\", x);\n\n    return 0;\n}\n\noutput:\nx: 45\n\n\nAs an exception, declaring an extern variable with initialization is permitted, yet it throws a warning and is not recommended\n\nextern int x = 45;\n\nint main()\n{\n    printf(\"x: %d\\n\", x);\n\n    return 0;\n}\n\noutput:\nwarning: ‘x’ initialized and declared ‘extern’\n | extern int x = 45;\n |            ^\nx: 45\n\n\nDeclaring extern keyword without defining, accessing, or initializing it also works fine\n\nextern int x;   // only declaration, no memory allocated\n\nint main()\n{\n    printf(\"Hello World!\");\n\n    return 0;\n}\n\noutput:\nHello World!\n\n\nSince the functions are global by default, the use of extern keyword for functions doesn't needed\n\n\nregister\n\nAllows storing variables inside CPU register instead of memory\nVariables that are used frequently can be stored inside the register so that they can be accessed faster\nRegister variables have scope until execution of block they are declared inside\n\nint main() {\n    register int x = 10;    // declared and defined inside register with value 10\n\n    printf(\"x: %d\\n\", x);\n\n    return 0;\n}\n\noutput:\nx: 10\n\n\nUsing time command in Linux for the programs without and with register variable shows the difference between execution time\n\nwithout register keyword\n$ time ./test_register_variable\nx: 10\n\nreal    0m0.001s\nuser    0m0.002s\nsys     0m0.000s\n\n\nwith register keyword\n$ time ./test_register_variable\nx: 10\n\nreal    0m0.001s\nuser    0m0.001s\nsys     0m0.000s\n\n\nRegister variables cannot be declared globally\n\nregister int x = 10;\n\nint main() {\n    printf(\"x: %d\\n\", x);\n\n    return 0;\n}\n\noutput:\nerror: register name not specified for ‘x’\n\n\nRegister variables are initialized to a garbage value by default\nMost modern compilers store frequently used variables as register automatically, so even if you don't create any register variable, compilers will do it by themselves\n\n\nconst\n\nAllows declaring a variable as a constant, this means the value of the variable will not be changed throughout the program execution\nCan be written even after the datatype\n\nconst int a = 5;    // allowed\nint const a = 5;    // allowed\n\n\nIf we try to change the value manually it will throw compile error, this is also applicable to value modification by any other function or operations like increment/decrement\n\nconst int a = 5;\n\nint main()\n{\n    a = 10; // or a++ or --a\n\n    return 0;\n}\n\noutput:\nerror: assignment of read-only variable ‘a’\n\n\nAssigned value 0 (zero) as default if not initialized manually at the time of declaration\n\nconst int a;\n\nint main() {\n    printf(\"a: %d\\n\", a);\n\n    return 0;\n}\n\noutput:\na: 0\n\n\nHowever, the pointing value can be modified and assigned to a constant pointer\n\nint a = 10; // non-constant integer variable\nconst int * ptr = &amp;a;   // pointer is assigned address of a\n\nint main()\n{\n    printf(\"*ptr: %d\\n\", *ptr);\n    ++a;\n    printf(\"*ptr: %d\\n\", *ptr);\n\n    return 0;\n}\n\noutput:\n*ptr: 10\n*ptr: 11\n\n\nIn the case of pointer to constant works little different\n\nint a = 10;\nint b = 20;\nint * const ptr = &amp;a;\n\nint main()\n{\n    *ptr = b;\n    printf(\"*ptr: %d\\n\", *ptr);\n    ++a;\n    printf(\"*ptr: %d\\n\", *ptr);\n\n    return 0;\n}\n\noutput:\n*ptr: 20\n*ptr: 21\n\n\nvolatile\nThe volatile keyword is used for creating volatile objects. A volatile object can be modified in an unspecified way by the hardware.\n\nUsed to tell explicitly the compiler that a variable's value may be changed at any time by some external sources (from outside the program)\nAs the value can be modified of a volatile variable even by its own program, we can add const keyword to keep the value unchanged by its own program but can be altered by some other process/external program\n\nconst volatile number;\n\nHere, a number is a volatile object.\nSince a number is a constant, the program cannot change it. However, hardware can change it since it is a volatile object.\n\nif and else\n\nEveryone's favorite, a powerful decision-making statement and used to control the flow of execution of statements\n\nif (expression)\n\n\nif allows the computer to evaluate the expression first and then, depending on whether the value of the expression (relation or condition) is true (or non-zero) or false (zero), it transfers control to a particular statement\nelse is the keyword used along with if when the mentioned expression doesn't satisfy then there should be something for the false condition of it\n\nif (if this is true) {\n    // true block statements\n} else {\n    // false block statements\n}\n\n\nOne cannot write else without pairing if, or before if\n\nif (i == 1) {\n    printf(\"i is 1\");\n} else {\n    printf(\"i is not 1\");\n}\n\nIf the value of i is other than 1, the output will be:\ni is not 1\n\n\n\nCan be implemented in the following forms\n\nSimple if statement\nNested if statement\nif ladder\nif ... else statement\nNested if ... else statement\nif ... else ladder\n\n\n\nDe Morgan's rule is applicable to if expressions\n\n\nif (!x)     // if x is false then execute the statement\n    true\n\n\nswitch, case, and default\nThe switch and case statement is used when a block of statements has to be executed among many blocks.\n\nSometimes complexity of if ladder increases dramatically when the number of alternatives increases, in terms of following and reading the program. Thus, the switch statement makes it more accessible.\nswitch statement tests the value of a given variable (or expression) against a list of case values and when a match is found, a block of statements associated with that case is executed\n\nswitch (expression) {\n    case value1:\n        // statement block 1\n        break;\n    case value2:\n        // statement block 2\n        break;\n    ...\n    ...\n    default:\n        // default statement block\n        break;\n}\n\n\nThe expression must be an integer or characters, whereas value1, value2, ... are constants or constant expressions known as case labels (must be unique)\nThe default is optional, when present, it will be executed if the value of the expression does not match with any of the case values.\n\nswitch (expression) {\n    case '1':\n        // some statements to execute when 1\n        break;\n    case `5`:\n        // some statements to execute when 5\n        break;\n    default:\n        // some statements to execute when default\n}\n\n\nExpression must be an integral type\nbreak statement transfers the control out of the switch block\nNesting of switch is permitted\n\n\nbreak, goto, and continue\n\nbreak and goto keywords are used for jumping out of a loop, accomplishing an early exit\nWhereas continue keyword is used for skipping a part of a loop\n\nwhile (1) { // infinite while loop\n    // continue keyword will transfer the control here\n    for (---) {\n        if (---) {\n            // breaks the current loop and executes\n            // statements under the statement block\n            goto situation;\n        } else if (---) {\n            // if the condition is true then\n            // break the loop to transfer the \n            // control out of it\n            break;\n        } else if (---) {\n            // if the condition is true then\n            // skip all other remaining part of the loop\n            // and transfer the control at the start of \n            // the loop again\n            continue;\n        }\n\n        // continue will skip all these statements in the loop\n        ---\n        ---\n    }\n    // break keyword will transfer the control here\n}\n\n// goto keyword will transfer the control here\nsituation:\n    // statements\n\n\nWhen the break statement is encountered inside a loop, the loop is immediately exited and the program continues with the statement immediately following the loop\nbreak only exits from one loop\ngoto requires a label in order to identify the place where the branch is to be made\nUnlike break which causes the loop to be terminated, the continue, causes the loop to be continued with the next iteration after skipping any statements in between\nIt is always good practice to avoid goto, as it affects efficiency, complications, and readability\nOne can also use the exit() function instead of break for exiting out of the loop, along with the inclusion of &lt;stdlib.h&gt;\nThe use of break and continue statements in any of the loops is considered unstructured programming\n\nfor (int i = 1; i &lt; 10; ++i) {\n    if (i == 3)\n        continue;\n    if (i == 7)\n        break;\n\n    printf(\"%d \", i);\n}\n\noutput:\n1 2 4 5 6\n\nWhen i is equal to 3, the continue statement comes into effect and skips 3. When i is equal to 7, the break statement comes into effect and terminates the for loop\n\nwhile\n\nSimplest and easy-to-understand loop statement\n\nwhile (test condition) {\n    // body of the loop\n}\n\n\nThe while is an entry-controlled loop statement\nThe test condition is evaluated and if the condition is true, then the body of the loop is executed\nThis flow continues until land unless the test condition becomes false, and control is transferred out of the loop\nCan be used for infinite execution of a program\n\n\ndo\n\nOn some occasions, it might be necessary to execute the body of the loop before the test is performed\n\ndo {\n    // body of the loop\n} while (test condition);\n\n\nOn reaching the do statement, the program proceeds to evaluate the body of the loop first. At the end of the loop, the test condition in the while statement is evaluated\nIf the condition is true, the program continues to evaluate the body of the loop once again. This process continues as long as the condition is true.\nWhen the condition becomes false, the loop will be terminated and the control goes to the statement that appears immediately after the while statement.\nSince the test condition is evaluated at the bottom of the loop, the do...while construct provides an exit-controlled loop, and therefore the body of the loop is always executed at least once.\n\ndo {\n    printf(\"Input a number\\n\");\n    number = getnum();\n} while (number &gt; 0);\n\n\nfor\n\nEntry controlled loop that provides a more concise loop control structure\n\nfor (initialization; test-condition; increment) {\n    // body of the loop\n}\n\n\nInitialization of the control variables is done first, using assignment statements such as i = 1 and count = 0, the variables i and count are known as loop control variables\nThe value of the control variable is tested using the test condition. the test condition is a relational expression, such as i &lt; 10 that determines when the loop will exit.\nIf the condition is true, the loop's body is executed; otherwise, the loop is terminated and the execution continues with the statement that immediately follows the loop\nWhen the loop body is executed, the control is transferred back to the for statement after evaluating the last statement in the loop.\nNow, the control variable is incremented using an assignment statement such as i = i + 1, and the new value of the control variable is again tested to see whether it satisfies the loop condition, if the condition is satisfied, the body of the loop is again executed. This process continues till the value of the control variable fails to satisfy the test condition.\n\nAdditional features\n\nMore than one variable can be initialized\n\nfor (int p = 1, n = 0; n &lt; 17; ++n) {\n    // block statement\n}\n\n\nInfinite for loop\n\n    for (; ; ) {\n        // block\n    }\n\n\nNested for loops\n\nfor (int i = 0; i &lt; rows; ++i) {\n    for (int j = 0; j &lt; columns; ++j) {\n        // block\n    }\n}\n\n\n","id":"https://hexavik.github.io/posts/keywords-in-c-programming/","title":"Keywords in C programming"},"https://hexavik.github.io/posts/register-vs-memory/":{"body":"Introduction\nRegisters and memory are two fundamental components of computer systems. While they both play a crucial role in storing data, they have distinct characteristics and serve different purposes. In this post, we'll explore the differences between registers and memory in a friendly and easily understandable way.\nRegisters: The Speedy Messengers 🚀\nThink of registers as the swift messengers within a computer system.\n\nThey are small, high-speed storage units located directly in the CPU.\nRegisters can hold a limited amount of data, typically ranging from a few bits to a few bytes.\nDue to their proximity to the CPU, accessing registers is lightning-fast.\nRegisters are primarily used for temporary storage of data during the execution of instructions.\nThey act as the CPU's working space, allowing it to quickly access and manipulate data required for immediate processing.\nThink of registers as a scratchpad where the CPU performs its calculations and keeps track of intermediate results.\n\nMemory: The Reliable Vault 🗄️\nOn the other hand, memory serves as the reliable vault of a computer system.\n\nIt provides a much larger storage capacity than registers, measured in gigabytes or even terabytes.\nMemory is typically located outside the CPU and is connected to it through buses.\nUnlike registers, memory is relatively slower to access. However, its capacity allows for long-term storage of data, even when the power is turned off.\nIt acts as a repository for programs, data structures, variables, and other information needed by the system.\nMemory provides a stable and persistent storage solution for storing and retrieving data.\n\nKey Differences\n1. Speed:\n\nRegisters are lightning fast, offering the fastest data access in the system.\nIn contrast, memory access is relatively slower due to the larger capacity and the need to traverse buses.\n\n2. Capacity:\n\nRegisters have limited capacity and can hold only a small amount of data.\nMemory, on the other hand, provides a significantly larger storage capacity for long-term data storage.\n\n3. Proximity:\n\nRegisters are located within the CPU, ensuring quick access to data during instruction execution.\nMemory is located outside the CPU and requires additional time for data retrieval.\n\n4. Persistence:\n\nData stored in registers is temporary and gets erased after its usage.\nMemory, however, retains data even when the power is turned off, allowing for long-term storage.\n\nImage by storyset on Freepik\n","id":"https://hexavik.github.io/posts/register-vs-memory/","title":"Understanding the difference between Registers and Memory in Computer Systems"},"https://hexavik.github.io/posts/structures-in-c-programming/":{"body":"\nStructures are basic building blocks of object-oriented programming, if anyone practices C structures, they can understand and take a good leap in object-oriented programming. C structures are so definitive that they even let us know the pointer concept in a better way.\n\nAs we know, an array cannot be defined with different datatypes inside it, so structures are created to resolve the limitation of grouping variables with different data types together\nStructures are the constructed datatypes in C, their general syntax is as follows\n\nstruct tag_name {\n    datatype member1;\n    datatype member2;\n    ...\n    datatype memberN;\n};\n\n\n\nThe keyword struct defines the structure format\nThe tag_name can be used to declare structure variables of its type, later in the program\nVariables defined inside the structure are structure elements or members\nThe structure format is called a template, note that it has not declared any variables\nEven if the entire definition is considered as a statement, each member is declared independently for its name and type in a separate statement inside the template\nThe following example will help us to understand this better\n\nbook: author(char), title(char), price(float), year(int)\n\nstruct book {\n    char author[20];\n    char title[15];\n    float price;\n    int year;\n};\n\n\n\nOne cannot assign values to the structure members at the time of initialization or definition\n\nstruct book {\n    char author[20] = \"some author Name\";\n    char title[15] = \"Book Title\";\n    float price = 14.95;\n    int year = 2017;\n};\n\noutput:\nError\n\n\nVariables can be declared along with struct keyword and tag-name\n\nint main() {\n    struct book book1, book2;\n}\n\nor\nstruct book {\n    char author[20];\n    char title[15];\n    float price;\n    int year;\n} book1, book2;\n\n\nMembers are assigned values or accessed as follows\n\nint main() {\n    // declaration of structure variable\n    struct book book1;\n\n    // assign values to structure members\n    strcpy(book1.author, \"some author name\");\n    strcpy(book1.title, \"Some Title\");\n    book1.price = 14.95;\n    book1.year = 2017;\n\n    // access structure members\n    printf(\"Author: %s\\nTitle: %s\\nPrice: %f\\nYear: %d\\n\", \n            book1.author, book1.title, book1.price, book1.year);\n\n    return 0;\n}\n\noutput:\nAuthor: some author name\nTitle: Some Title\nPrice: 14.950000\nYear: 2017\n\n\nMembers can also be assigned values while declaring a variable, however, the order must be according to the structure template\n\nstruct book book1 = {\"some author name\", \"Some Title\", 14.95, 2017};\n\nor\nstruct book {\n    char author[20];\n    char title[15];\n    float price;\n    int year;\n} book1 = {\"some author name\", \"Some Title\", 14.95, 2017};\n\n\nPartial initialization is permitted, however, it is important to follow the order\n\n// declaration of structure variable\nstruct book book1 = {\"some author name\", \"some title\"};\n\n// assign values to structure members\nbook1.price = 14.95;\nbook1.year = 2017;\n\n// not allowed\nstruct book book1 = {14.95, 2017};\n\n\nThe uninitialized members will be assigned default values, 0 (zero) for integers and floating point numbers, whereas, '\\0' (null character) for characters and strings\nCopying of one structure variable to another can be done the same way as ordinary variables (both variables must belong to the same structure)\n\nstruct book book1 = {\"some author name\", \"some title\"};\n\nstruct book book2;\n\n// copying the data of one variable to another\nbook2 = book1;\n\n\nNote that comparison statements such as book1 == book2 or book1 != book2 are not permitted, however, we need to perform comparisons between members individually, e.g. book1.price == book2.price\nIn the case of accessing members using pointers are as follows\n\nstruct book {\n    char author[20];\n    char title[15];\n    float price;\n    int year;\n};\n\nint main() {\n    // declaring the structure variables including a pointer\n    struct book b, *ptr;\n\n    b = {\"some author name\", \"Some Title\", 14.95, 2017};\n\n    // assigning the pointer variable\n    ptr = &amp;b;\n\n    // accessing structure members using pointer variable\n    printf(\"Author: %s\\n\", ptr-&gt;author);\n\n    // or\n    printf(\"Author: %s\\n\", (*ptr).author)\n\n    retrurn 0;\n}\n\n\nVariables of structure can be considered as normal variables, one can create an array of them, or apply typedef\nStructures can be used as a function parameter as well as a function return type\n\n// update the price and year of a book using\n// book structure by passing its variable as a parameter\n// and return the same\nstruct book update(struct book argBook, float argPrice, int argYear) {\n    argBook.price = argPrice;\n    argBook.year = argYear;\n    return argBook;\n}\n\nint main() {\n    struct book book1 = {\"some author name\", \"Some Title\", 14.95, 2017};\n\n    // display structure members\n    printf(\"Initial Book1:\\n\");\n    printf(\"Author: %s\\nTitle: %s\\nPrice: %f\\nYear: %d\\n\", \n            book1.author, book1.title, book1.price, book1.year);\n\n    // update price and year of existing book\n    book1 = update(book1, 18.50, 2019);\n\n    // display updated structure members\n    printf(\"\\nUpdated Book1:\\n\");\n    printf(\"Author: %s\\nTitle: %s\\nPrice: %f\\nYear: %d\\n\", \n            book1.author, book1.title, book1.price, book1.year);\n\n    return 0;\n}\n\noutput:\nInitial Book1:\nAuthor: some author name\nTitle: Some Title\nPrice: 14.950000\nYear: 2017\n\nUpdated Book1:\nAuthor: some author name\nTitle: Some Title\nPrice: 18.500000\nYear: 2019\n\n\nPointer based function parameter is more dynamic in terms of memory and time\n\nvoid update(struct book *argBook, float argPrice, int argYear) {\n    argBook-&gt;price = argPrice;\n    argBook-&gt;year = argYear;\n}\n\nint main() {\n    struct book book1 = {\"some author name\", \"Some Title\", 14.95, 2017};\n\n    // display structure members\n    printf(\"Initial Book1:\\n\");\n    printf(\"Author: %s\\nTitle: %s\\nPrice: %f\\nYear: %d\\n\", \n            book1.author, book1.title, book1.price, book1.year);\n\n    // update price and year of existing book\n    update(&amp;book1, 18.50, 2019);\n\n    // display updated structure members\n    printf(\"\\nUpdated Book1:\\n\");\n    printf(\"Author: %s\\nTitle: %s\\nPrice: %f\\nYear: %d\\n\", \n            book1.author, book1.title, book1.price, book1.year);\n\n    return 0;\n}\n\n\nNested Structures or structures within a structure is permitted, whereas the internal structure must be initialized with a variable\n\nstruct address {\n    char city[20];\n    struct details {\n        char name[20];\n        int number;\n        int floor;\n        char wing;\n    } apartment;\n};\n\nor\nstruct details {\n    char name[20];\n    int number;\n    int floor;\n    char wing;\n};\n\nstruct address {\n    char city[20];\n    struct details apartment;\n};\n\n\nThree ways to access structure members\n\ntypedef struct {\n    char author[20];\n    char title[15];\n    float price;\n    int year;\n} BOOK;\n\nBOOK b, *ptr;\nptr = &amp; b;\n\n// using dot notation\nb.year;\n// using indirection notation\n(*ptr).year;\n// using selection notation\nptr -&gt; year;\n\n\nThe size of structures can be returned by\n\n// without typedef\nstruct book {\n    char author[20];\n    char title[15];\n    float price;\n    int year;\n};\n\nsizeof(struct book);\n\n// with typedef\ntypedef struct {\n    char author[20];\n    char title[15];\n    float price;\n    int year;\n} BOOK;\n\nsizeof(BOOK);\n\n\nBit fields are such an interesting concept to use in structures, it is specifically used for programming in embedded systems\nA set of adjacent bits whose size can be from 1 to 16 bits in length. A word can therefore be divided into a number of bit fields.\n\nstruct tag-name {\n    data-type name1: bit-length;\n    data-type name2: bit-length;\n    ...\n    data-type nameN: bit-length;\n}\n\n\nBit fields always start with the first bit of the word (LSB)\n\nThat's all about structures in C, let me know if any one of you needs any help.\n","id":"https://hexavik.github.io/posts/structures-in-c-programming/","title":"Structures (struct) in C programming (detailed)"},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"body":"\nGreetings, Rustaceans!\nBecause they are both low-level and more swiftly executed, C and C++ are the most frequently utilized programming languages when we talk about embedded systems. However, C and C++ are older (in terms of their origin, not their usefulness), and there is hardly any chance that they will be updated to match future requirements because technology is developing more swiftly than before.\nGiven that embedded system devices are also a dynamic domain, Rust is being developed for the security and quicker execution of programs in a variety of domains. Let's rapidly comprehend how and why rust, in addition to C and C++, can be utilized for embedded systems.\nReasons for Rust? It offers the following features\n\nPerformance\nReliability\nProductivity\n\nWhy Rust for embedded devices?\nStatically typed and strongly typed\nEmbedded devices totally depend on the I/O pins, so it requires dedicated pin configuration so that it won't be used by another part of your application. Rust is statically typed and strongly typed so the guaranteed pin configuration is maintained at the compile time only.\nMemory safety and memory management\nRust's important feature is that it is better than other programming languages in most use cases of memory safety. Rust doesn't have garbage memory collection so one can use a global allocator and dynamic data structure, to avoid segmentation faults or core dump issues. Both stack and heap are used independently in Rust.\nConcurrency\nThread safety and management is also crucial and important aspect of multi-tasking-based embedded applications. Rust has different concurrency abstractions for various use cases, which provides the ability to maximize performance and minimize errors in a robust way.\nInteroperability\nCan be interfaced or integrated into existing C or C++ codebase. For this purpose, there are two dedicated modules in the stdlib called std::ffi and std::os::raw. This is possible because the memory layout between Rust, C, and C++ is similar enough or the same.\nPortability\nWrite once and use it with a variety of systems, as it allows cross-compiling, to build a binary in one architecture and can be used in multiple architectures. Support is being added and upgraded for microcontrollers and microprocessors.\nCommunity is keep growing\nAs part of the Rust open source project, support for embedded systems is driven by a best-in-class open source community, with support from commercial partners.\n(Source: rust-lang.org)\n","id":"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/","title":"Why is Rust used as an embedded system programming language?"},"https://hexavik.github.io/skills/":{"body":"Languages\n\nC\nC++\nRust\nMarkdown\nHTML\nXML\nJava 8 (For Embedded Systems API integration through JNI)\nC# (Limited project based experience)\nPython (Limited project based experience)\nYAML\n\nMicrocontrollers and Microprocessors\n\n8051 Family (89C51, 89V51RD2)\nAVR Family (ATmega8, ATmega16, ATmega32, ATmega128, ATtiny13)\nPIC Family (18F4550, 16F877)\nMSP430\nLPC2148\ni.MX (i.MX7D, i.MX6UL, i.MX8M)\nSTM32\n\nProtocols\n\nUART\nSPI\nI2C\n\nShells\n\nGNU Bash\n\nVersion Control\n\nGitHub\nBitbucket\n\nIssue Tracking\n\nJira\n\nText Editor and Tools\n\nNotepad++\nSublime Text\nVisual Studio Code\n\nSource Code Management\n\nSublime Merge\n\nOperating Systems\n\nLinux\nLinux Kernel\n\nCode Automation Tools\n\nMake\n\nInfrastructure\n\nYocto Project\n\nProject Management\n\nTrello\n\nElectronic CAD Tools\n\nAutodesk EAGLE\nAltium\n\nGraphic Design\n\nInkscape\nCanva\n\nDiagramming\n\ndrawio\n\nInterfacing Devices\n\nSensors (Digital, Analog, and I/O based)\nCommunication Devices (GSM, GPS, RFID, ZigBee, RF, Bluetooh-HC05)\nActuators (BLDC Motors, Servo Motors, Stepper Motors)\nDisplays (LCD16x2, LCD20x4, GLCD64x128, OLED, E-ink 6 inches and 10.3 inches)\nTouch Inputs (Capacitive and Resistive Touchscreens, Switches)\n\n","id":"https://hexavik.github.io/skills/","title":"Skills"}},"docInfo":{"https://hexavik.github.io/":{"body":0,"title":0},"https://hexavik.github.io/about/":{"body":515,"title":0},"https://hexavik.github.io/posts/":{"body":0,"title":1},"https://hexavik.github.io/posts/8-data-structures-every-programmer-must-know/":{"body":808,"title":5},"https://hexavik.github.io/posts/code-test/":{"body":24,"title":4},"https://hexavik.github.io/posts/efficient-firmware-code-in-embedded-systems/":{"body":2537,"title":4},"https://hexavik.github.io/posts/intel-hex-format/":{"body":369,"title":3},"https://hexavik.github.io/posts/keywords-in-c-programming/":{"body":2465,"title":3},"https://hexavik.github.io/posts/register-vs-memory/":{"body":245,"title":7},"https://hexavik.github.io/posts/structures-in-c-programming/":{"body":761,"title":5},"https://hexavik.github.io/posts/why-rust-used-as-an-embedded-systems-programming-language/":{"body":235,"title":6},"https://hexavik.github.io/skills/":{"body":145,"title":1}},"length":12},"lang":"English"};